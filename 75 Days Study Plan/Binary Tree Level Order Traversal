Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).

Example 1:

Input: root = [1]
Output: [[1]]


Example 2:

Input: root = []
Output: []

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };

    queue < int , treeNode >
    1.{0 , root}
    2.pop -- level , node
    3.map

 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        map<int , vector<int>> levelWiseData;
        queue <pair <int , TreeNode*>> q;
        vector<vector<int>> ans;

        if(root == NULL){
            return ans;
        }

        q.push({0,root});

        while(!q.empty()){
            auto element = q.front();
            q.pop();

            int level = element.first;
            TreeNode *node = element.second;

            if(levelWiseData.find(level) == levelWiseData.end()){
            levelWiseData[level] = vector<int> ();
            }

            levelWiseData[level].push_back(node->val);

            if(node->left){
                q.push({level + 1 , node->left});
            }

            if(node->right){
                q.push({level + 1 , node->right});
            }
        }

        for(auto it = levelWiseData.begin(); it != levelWiseData.end();it++){
            ans.push_back(it->second);
        }
        return ans;
    }
};
