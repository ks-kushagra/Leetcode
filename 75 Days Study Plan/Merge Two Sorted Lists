You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.


__________________________________________________________________________________________________________________________________________________________________


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };

 1 ->2 -> 4
 1->3 ->4

 A != NULL && B !=NULL

 if(A->val <=B->val){

 }
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode *head = NULL , *p =NULL;

        if(list1 == NULL){
            return list2;
        }

        if(list2 == NULL){
            return list1;
        }
    
        while(list1 !=NULL && list2 != NULL){
            ListNode *r;
            if(list1->val < list2->val){
                r=list1;
                list1 = list1->next;
            }

            else {
                r = list2;
                list2 = list2->next;
            }

            if(head == NULL){
                head = p = r;
            }
            else {
                p->next = r;
                p=p->next;
            }
        }

        if(list1) {
            p->next = list1;
        } 

        if(list2) {
            p->next = list2;
        }

        return head;
    }
};
